---

# project information
project_name: wireshark
project_url: "https://www.wireshark.org/"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/wireshark-icon.png"
project_blurb: "[Wireshark]({{ project_url }}) is the world’s foremost and widely-used network protocol analyzer. It lets you see what’s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. Wireshark development thrives thanks to the volunteer contributions of networking experts around the globe and is the continuation of a project started by Gerald Combs in 1998. "
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_blurb_optional_extras_enabled: false

# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}

# development version
development_versions: false

# container parameters
common_param_env_vars_enabled: true
param_container_name: "{{ project_name }}"
param_usage_include_env: true
param_usage_include_ports: false
param_usage_include_net: true
param_net: "host"
param_net_desc: "Use Host Networking"
param_env_vars:
  - { env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London." }
param_usage_include_vols: true
param_volumes:
  - { vol_path: "/config", vol_host_path: "/path/to/config", desc: "Users home directory in the container, stores program settings and potentially dump files." }
cap_add_param: true
cap_add_param_vars:
  - { cap_add_var: "NET_ADMIN" }
# optional parameters 
opt_param_usage_include_ports: true
opt_param_ports:
  - { external_port: "3000", internal_port: "3000", port_desc: "WireShark desktop gui, only use this if you are not using host mode and sniffing Docker network traffic." }
  - { external_port: "3001", internal_port: "3001", port_desc: "WireShark desktop gui HTTPS, only use this if you are not using host mode and sniffing Docker network traffic." }
opt_security_opt_param: true
opt_security_opt_param_vars:
  - { run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, many modern gui apps need this to function on older hosts as syscalls are unknown to Docker." }

# Kasm blurb settings
kasm_blurb: true
external_http_port: "3000"
external_https_port: "3001"
noto_fonts: "font-noto-cjk"

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  In order to dump from an interface you will need to pass `NET_ADMIN` at a minimum, optionally you can use host networking to capture from your host level device or specify a Docker network you want to capture from.
  
  The application can be accessed at:

  * http://yourhost:3000/
  * https://yourhost:3001/

# changelog
changelogs:
  - { date: "23.05.24:", desc: "Rebase to Alpine 3.20." }
  - { date: "10.02.24:", desc: "Update Readme with new env vars and ingest proper PWA icon." }
  - { date: "02.01.24:", desc: "Rebase to Alpine 3.19." }
  - { date: "13.05.23:", desc: "Rebase to Alpine 3.18." }
  - { date: "18.03.23:", desc: "Rebase to KasmVNC base image." }
  - { date: "23.10.22:", desc: "Rebase to Alpine 3.16, migrate to s6v3." }
  - { date: "14.02.22:", desc: "Rebase to Alpine." }
  - { date: "31.03.20:", desc: "Initial release." }
